#ifndef _MODEL_
#define _MODEL_

#include <iostream>
#include <string>
#include <vector>

using namespace std;

class GVersion;
class GPackage;
class GClass;
class GMethod;
///////////////////////////////////////////////////////////////////////////

// helper function for iterating over std::vector<>
// it makes iterating over STL elements much easier
// instead of 
//
//		_type::iterator _var = _coll.begin();
//		for(; _var != _coll.end(); _var++) {
//			...
//		}
//
//	you can just use
//
//		foreach(_var, _coll, _type) {
//			...
//		}
#define foreach(_var, _coll, _type) \
	for (_type::iterator _var = _coll.begin(); \
         _var != _coll.end(); ++_var)

class GVersion {
public:
	GVersion(int vn){versionNumber = vn;}
	~GVersion(){}

	int versionNumber;
	vector<GPackage> childPackages;
};

class GPackage {
public:
	GPackage(int ct, string pn){creationTime = ct; packageName = pn;}
	~GPackage(){}

	int creationTime;
	int packageID;
	string packageName;
	vector<GClass> childClasses;

};

class GClass {
public:
	GClass(){}
	~GClass(){}
	
	GMethod searchMethod(string methodName);

	vector<GMethod> childMethods;		// list of methods in the class
	string className;					
	int classID;						// generated by scorpio
	int creationTime;					// commit(/version) number when the class was added
	int size;							// number of lines
	// number of edits by each author to determine the RGB coloring
	int author_a;							// Anmol
	int author_s;							// Shirley (Xue Qi)
	int author_j;							// Jimmy
};

class GMethod {
public:

	GMethod() 
	{}
	~GMethod(){}

	int creationTime;						// commit number where method was added		
	int endTime;							// commit number where method was deleted
	int duplicationID;						// an id to determine which two methods are duplicates
	int size;								// number of lines
	string methodName;
	int methodID;
	GClass parentClass;			
};

#endif
