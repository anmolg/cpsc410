#ifndef _MODEL_
#define _MODEL_

#include <iostream>
#include <string>
#include <vector>

using namespace std;

class GVersion;
class GPackage;
class GClass;
class GMethod;

struct Authors {
	int author_a;							// Anmol
	int author_s;							// Shirley (Xue Qi)
	int author_j;							// Jimmy
};

///////////////////////////////////////////////////////////////////////////

// helper function for iterating over std::vector<>
// it makes iterating over STL elements much easier
// instead of 
//
//		_type::iterator _var = _coll.begin();
//		for(; _var != _coll.end(); _var++) {
//			...
//		}
//
//	you can just use
//
//		foreach(_var, _coll, _type) {
//			...
//		}
#define foreach(_var, _coll, _type) \
	for (_type::iterator _var = _coll.begin(); \
         _var != _coll.end(); ++_var)

class GVersion {
public:
	GVersion(int vn){versionNumber = vn;}
	~GVersion(){}
	// returns null if we can't find package
	GPackage searchPackage(string pn);

	int versionNumber;
	vector<GPackage> childPackages;
	bool alive;
};

class GPackage {
public:
	GPackage(int ct, string pn){creationTime = ct; packageName = pn;}
	GPackage(int ct){creationTime = ct;};
	~GPackage(){}
	// returns null if it can't find class
	GClass searchClass(string classname);

	int creationTime; // if creationTime = -1, then it's a dummy
	int packageID;// might not use
	string packageName;
	vector<GClass> childClasses;
	bool alive;

};

class GClass {
public:
	GClass(){}
	GClass(int ct){creationTime = ct;}
	~GClass(){}
	
	GMethod searchMethod(string methodName);

	vector<GMethod> childMethods;		// list of methods in the class
	string className;	
	string parentPackageName;
	int classID;						// generated by scorpio
	int creationTime;					// commit(/version) number when the class was added
	vector<int> size;							// number of lines
	// number of edits by each author to determine the RGB coloring
	vector<Authors> authors;			// 125 entries, accumulative.

	bool alive;
};

class GMethod {
public:

	GMethod(){}
	GMethod(int ct){creationTime = ct;}
	~GMethod(){}

	int creationTime;						// commit number where method was added		
	int endTime;							// commit number where method was deleted
	vector<int> duplicationIDs;
	string methodName;
	int methodID;
	int parentClassID;			
	bool alive;
	
};

#endif
